#!/usr/bin/env python3

import argparse
import subprocess
import os
import json
from time import time

DEFAULT_LANGUAGE = "cpython"
DEFAULT_SUBMIT_TARGET = "main.py"
DEFAULT_WAIT_TIME = "0"
ATCODER_ROOT = "https://atcoder.jp/"
OJ_DOWNLOAD_HISTORY_PATH = os.path.join(os.environ["HOME"], ".cache/online-judge-tools/download-history.jsonl")


def get_args():
    parser = argparse.ArgumentParser(description="oj command wrapper for submit to AtCoder")
    parser.add_argument('-l', "--language", type=str, default=DEFAULT_LANGUAGE, help="submit language")
    parser.add_argument('-t', "--target", type=str, default=DEFAULT_SUBMIT_TARGET, help="target file for submit")
    parser.add_argument('-w', "--wait", type=str, default=DEFAULT_WAIT_TIME, help="wait time before submit")
    
    args = parser.parse_args()
    return args

def get_args_info():
    args = get_args()
    args_info = args.__dict__
    return args_info

def get_guessed_url():
    cwd = os.getcwd()
    problem_id = os.path.split(cwd)[-1]
    contest_id = problem_id.split("_")[0]
    guessed_url = os.path.join(ATCODER_ROOT, "contests", contest_id, "tasks", problem_id)
    return guessed_url

def write_dummy_history():
    timestamp = int(time())
    url = get_guessed_url()
    directory = os.getcwd()
    dummy_history_dict = {"timestamp":timestamp, "directory":directory, "url":url}
    dummy_history = json.dumps(dummy_history_dict) + "\n"
    
    with open(OJ_DOWNLOAD_HISTORY_PATH, mode='a') as f:
        f.write(dummy_history)
    return

def make_command():
    args_info = get_args_info()
    language = args_info["language"]
    submit_target = args_info["target"]
    url = get_guessed_url()
    
    command_elements = ["oj", "s", url, submit_target]
    
    if language in ["cpython", "pypy"]:
        python_elements = ["--guess-python-interpreter", language]
        command_elements.extend(python_elements)
        
    wait_time = args_info["wait"]
    command_elements.extend(["--wait", wait_time])
    
    command = " ".join(command_elements)
    return command

def submit():
    command = make_command()
    subprocess.run(command, shell=True)

def main():
    write_dummy_history()
    submit()
    
if __name__ == "__main__":
    main()